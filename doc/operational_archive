
Archived entries from file /home/sylecn/projects/firefox/nextpage/doc/operational
* DONE quick prototype
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-02 Thu 13:57
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: 2012-07-31 support user binding config file
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :END:
  - read $HOME/d/t1.firefox when add-on startup.
  - print content of it when user type "x"

    this one is new: https://developer-new.mozilla.org/en-US/docs/Code_snippets/File_I_O

    read text file works.

* DONE 2012-08-02 design the thing (finished)
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-02 Thu 15:46
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: 2012-07-31 support user binding config file
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :END:
  - DONE add config file based key binding system.
    - parse config file, produce js objects.
      nextpage.config.keybindings = []
      same as the old nextpage.binding dict.

    - in key event, process defined hotkeys
  - DONE remove preferences based binding completely.
    prefsNameList: ["extensions.nextpage.use-space",
		   "extensions.nextpage.use-n-p",
		   "extensions.nextpage.use-1-2",
		   "extensions.nextpage.use-alt-p",
		   "extensions.nextpage.use-alt-n"],
    prefWatcher

    updateStatus
    updateHotKeys

    nextpage.binding  this.binding    replaced by nextpage.config.getBindings()
    nextpage.status removed.
* DONE 2012-08-19 pref window: when screen resolution is too small, the bottom
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-19 Sun 00:22
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: later
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  buttons may not be visible.
  after adding <vbox flex="1" style="overflow:auto">, scroll bar still not
  shown when there is not enough space to show all widgets.

  also add flex="1" style="overflow:auto" to prefpane, now it works.

* DONE 2012-08-18 pref window: config file textbox is not long enough to
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-19 Sun 00:26
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: later
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  show the path.

  set the size attribute
* DONE 2012-08-18 implement save&reload, reload-only.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-19 Sun 00:26
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  - DONE save file to disk.
    config.js write_config_file

* DONE Now, how to send notifications from one window to another.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-19 Sun 00:27
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current/2012-07-31 support user binding config file/2012-08-02 when implementing the preferences window.
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  My message: nextpage-reload-config
  https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIObserver?redirectlocale=en-US&redirectslug=nsIObserver

  nsIObserver
  The nsIObserver interface is a generic notification callback interface that is typically used in conjunction with nsIObserverService.

  nsIObserverService
  The nsIObserverService interface provides methods to add, remove, notify, and enumerate observers of various notifications. 

  - how to test this API.
    in overlay, register a callback for the message.
    in preferences, send a message.
    in overlay's callback, log message to console.

    tested. It works.

* DONE 2012-08-02 when implementing the preferences window.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-19 Sun 00:28
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current/2012-07-31 support user binding config file
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  I can't call functions defined in overlay.xul 's script.
  Then how can I share js code between the two?

  - 2012-08-03 Here is one way to do it:
    both overlay and preference window use config.js to do config file
    related actions.

    if user click reload or save, it verifies there are no errors.
    then send a NOTIFICATION to overlay.
    overlay then reload the config from disk.
    Everything is stored in disk. There is no "for this session" concept.
* DONE 2012-08-22 support close-tab command.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 15:04
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
* DONE 2012-08-22 add (unbind-all) command support in user config file.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 15:17
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  for user that do not want default bindings, they can add this at top of
  their config file and define bindings themselves.
* DONE 2012-08-22 update preferences window after the default config string is
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 16:33
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  introduced.

  - DONE add an offline help system if possible.
    can I show a html page in a browser tab.
    - add html file in add-on package.
      html file created: ../src/chrome/content/usage.html
    - add help button in preferences window.
    - create tab with chrome:// style URL.
      include chrome://browser/content/utilityOverlay.js
      openUILinkIn(url, "tab");
  - DONE show default config on top half.
  - DONE show message in log_area if there is no default user config.
    only create the file if the user click "Save" button.

    No user config file was found, type in blank box and hit "Save & Reload"
    button to create one.
** DONE how to show a html page in preferences window?
   include chrome://browser/content/utilityOverlay.js
   then call:
   openUILinkIn(url, "tab");
* DONE 2012-08-19 use one built-in config file and one user config file.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 16:34
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  was: create a default config file on startup.

  when the two config file idea is implemented, there is no need to create a
  default config file on user's disk. The default config can be shown to the
  user, but it need not be in user's config file.

  in other words, the default user config file will be an empty file. There
  is no need to create it, unless the user want to customize.
** DONE steps
   - DONE add default config string
   - DONE use that as default config
     in init_bindings().
     parse_config_file should first parse default config string, then user's
     config file.

     DONE how to update an object like in python.
     dict.update(anotherDict)

     a = {a:1}
     b = {b:2, a:3}
   - WONT two parsing mode. first is clear and parse. second is append parse.
     this is unnecessary. parse_config_file is written in functional style.
   - DONE test that bind something to nil works.
     - DONE check for nil in nextpage's dispatch function.  command is put in
       an if, I put null value in the binding's command slot. so it will not
       execute the null command.
** DONE 2012-08-19 use two config file.
   one internal config file, one user config file.

   The internal config file need not to be a real file, it could be a fixed
   string in config.js, but the logic still holds.

   Things defined in user config file will just overwrite internal config
   file. So that if I add additional bindings or functions in the future,
   user can keep their config file and still use default enabled new
   features.

   For current case, things in internal config file could be:
   (bind "SPC" 'nextpage-maybe)
   (bind "n" 'nextpage)
   (bind "p" 'history-back)

   one example of user config file:
   (bind "SPC" nil)
   (bind "c" 'close-tab)

   I like this idea.
* DONE 2012-08-22 if ~/.config does not exists. Do I need to call
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 16:58
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  config.create_config_file before calling config.write_config_file?

  No. I tested it, and found that all parent dirs will be created
  automatically. I haven't see any formal document for this, but I guess the
  FileUtils API will not change.

  This is not used, so removed.
  #+BEGIN_SRC js2
    /**
     * create config file. all parent dirs will be created.
     */
    var create_config_file = function () {
	init_config_file();
	if (! config_file.exists()) {
	    config_file.create(0, 0644); //0 for NORMAL_FILE_TYPE
	}
    };
  #+END_SRC
* DONE 2012-08-19 check config errors before saving to disk.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 19:42
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  show errors to user.

** DONE need to change GUI logic
   press save&load will first do a trail load, show warnings and errors to
   user. if there is no error, use it as new config, otherwise, still use old
   config. (i.e. do not send the notification)

   - API change: parse_config_file now return a third argument: success?
     - check all calls to parse_config_file. update if necessary.
** DONE bugfix: allow empty lines
** DONE parsing is full of headache without good planning.
   syntax check should be different from semantics.
   the real function call should be lazy. lazy. and lazy.
   they should never be called when checking syntax.

   move the function that
       map command used in config file to real function objects.
   to nextpage.js
   remove command_name_map, get_command_name_map()

   use nextpage.commands.runUserCommand in nextpage.js.
* DONE 2012-07-31 support user binding config file
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 19:54
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  the config file could be a plain file or an encoded firefox preferences
  entry. I prefers a persistent text file as config file. But I know some
  windows users would rather not.

  - DONE how to get user's home dir?
    see https://developer-new.mozilla.org/en-US/docs/Code_snippets/File_I_O
    use built-in FileUtils js module.
  - DONE how to read the file. use NetUtil module.
  - DONE how to parse the file
    parse line by line, use regexp to do toy parsing.
  - DONE provide a button to reload config file.
    which means current config should be flushed and updated.

** DONE 2012-08-02 design the thing (continued)
   - WONTFIX create a default config file on add-on init.
     if config file is found, do not overwrite it.
     To create the file, you need to create all parent dirs.

     - I used the two config design. one built-in, one user config.
       see that entry for more info.

       There is no need to create a default config file because of the
       built-in config. User can create a user config file with one click.

   - DONE add a label to show config file path.
     DONE add a button to copy config file path.

   - DONE add a button to reload config file.
   - DONE allow temperately disable a keybinding.
     by adding a text widget. (serves as a simple text editor)
     save button and reload button.

** DONE define the config file format
   #+BEGIN_SRC emacs-lisp
     ;; use emacs style key name.
     ;;   C-a means Ctrl-a
     ;;   M-a means Alt-a
     ;;   C-M-a means Ctrl-Alt-a
     ;; 
     ;; to known a key or key sequence's name, start emacs and type C-h c, then
     ;; type your key sequence.
     (bind "b" 'history-back)
     (bind "c" 'close-tab)
     (bind "SPC" 'nextpage-maybe)
     (bind "n" 'nextpage)
     (bind "p" 'history-back)
   #+END_SRC

** DONE define the preferences UI
   config file: [/home/sylecn/.config/nextpage.conf] [copy]
   [a big text area here]
   [save & load] [reload only]

   when user press save & load, check the config in text area widget for
   errors. if it is good, tell user "looks good.", save it to disk, tell
   overlay to reload it. if there are some warnings, tell user, for example,
       "line 6: overwrite earlier binding (key, foobar)."
   still save and reload.
   if there are errors, tell user and do not save and reload.

   example error message:
       line X: unknown command: foo
       line Y: bind: invalid key: foo.
       line Y: bind: invalid command: foobar.
* DONE 2012-08-22 bug: (bind "b" 'history-back  ) is not accepted.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 20:30
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  fixed. but this also show that a sexp parser will be very helpful. regexp
  parsing requires more care to be taken to get it right.
* DONE 2012-08-22 add syntax checking rule for the keyname.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 20:33
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  do not allow space in keyname.
* DONE 2012-08-22 update config_textbox if user click "Reload only" button.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 21:19
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
* DONE 2012-08-22 error message on startup.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 22:41
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  fixed. it's in old debug code:
  config.js:257:init_bindings()
  using old nextpage.config instead of new nextpage_config.

  object.keys() requires firefox 4.0. do not use it.
  only use it if it is available.
* DONE 2012-08-22 config file: allow enable debug on the fly.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-22 Wed 22:41
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  (enable-debug)

  ;;(setq debug t)

  This will call nextpage.commands.enableDebug(), which will set some of the
  debug variables to true.

  nextpage.debug._debugging = true;
  nextpage.debug._debugSpecialCase = true;
  nextpage.debug._debugGotoNextPage = true;
  nextpage.debug._debugConfigFile = true;

** it's not easy.
   enable-debug need to run in the overlay thread.
   the interpreter should be moved there.
   the parser did not know what is debug and how to enable it.

   all things should be moved to nextpage.js, the config.js should only do
   syntax check.

   - generating bindings objected. including clear via the unbind-all
     command.
   - enable-debug

   used a quick hack in config.js
       var in_overlay = typeof(nextpage) !== "undefined";
   then use if (in_overlay).
* DONE 2012-08-22 update translation files
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 14:24
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  clear old translation strings.
  "bind n/p" etc.

  - DONE remove old translation strings. added translation strings for
    preferences.xul GUI widgets.

  - DONE in preferences.xul, some message printed also requires translation.
* DONE 2012-08-26 testing the preferences -> config file conversion.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 16:24
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
** 2012-08-26 error at startup, appear twice.
  Timestamp: 08/26/2012 03:54:15 PM
  Error: TypeError: this.ignoreBindingAList is undefined
  Source File: chrome://nextpage/content/nextpage.js
  Line: 79
** 2012-08-26 do not remove pref definitions at 
   defaults/preferences/nextpage.js

   firefox clears old config if it is no longer in that file.

** DONE 2012-08-26 getBoolPref raise exception if key does not exist.

* DONE 2012-08-22 when user upgrade to 1.3.6, read old preferences based config :rc:
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 16:24
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  and create a default user config file if they are not using default
  settings in 1.3.4.

  - Here is how it works:
    when nextpage read user config file, if it does not exist, and it found
    old preferences. create a user config file from old preferences.
    do not delete old preferences in case user wish to go back.

  - this will require check all nextpage preferences every time if user has
    not change default preferences, which is not good.
    How about add a flag in preferences?

    only convert on first run.

    extensions.nextpage.convert_done (default is false)

    the whole logic is:
    - if user config file does not exist
      - if convert_done is false,
	- check and do conversion.
	- set this to true.
      - if convert_done is true, do not check.

** DONE need to run it in overlay.xul init. use functions defined in config.js.
   nextpage_config.init_bindings();
   only do this when running in browser window.

   - it doesn't matter, the preferences XPCOM interface works in both env.
     I just added code in nextpage_config.init_bindings();
** DONE how to check a preferences in js?
   use XPCOM
   nsIPrefService
* DONE 2012-08-26 BUGFIX forget to check whether mo is null when doing bind command.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:01
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  fixed.

* DONE BUG when click "reload only" button. save/reload is run twice.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:16
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current/2012-08-26 BUGFIX bug exception when saving an empty user config file.
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  not a bug. can't reproduce.
* DONE 2012-08-26 BUGFIX bug exception when saving an empty user config file.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:18
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  config.js:188
** DONE when user config is empty. this error will occur.
   when reading an empty user config file, there will be error when calling
   inputStream.available().

   - catch exception there.

* DONE config.js:353 tell user about parsing error.
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:19
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current/2012-08-19 grep for TODOs and 'log(' before commit
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  https://developer.mozilla.org/en-US/docs/Code_snippets/Alerts_and_Notifications
  using notification box result only flush the message, then it got closed
  before user could see it.

  well, just let user decide what is wrong.
  when they edit it in browser, the save&reload button will check errors.
  when they edit in external editor, the reload button should check and
  report errors.

  If there are errors, do not send reload NOTIFICATION.

** DONE 2012-08-26 bugfix update_user_config_textbox is lazy, should use callbacks
   all the way down in reload(true).
   
   - refactoring: extract send_reload_notification(), remove parameter of
     reload().
* DONE 2012-08-19 grep for TODOs and 'log(' before commit
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:33
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  - DONE TODOs
  - DONE 'log('
* DONE 2012-08-26 clear up and release 1.3.6 which will be the last version that
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-26 Sun 19:36
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
  runs on [3.6, 4). after that I will make this add-on restart-less.

** DONE clear up
   - DONE remove unused translations.
   - WONT remove default preferences.
     old preferences are required to stay. otherwise they got wiped when
     installing this add-on. (only tested in dev profile.)
   - add Chinese usage.html page.
     Will leave it later.
* DONE 2012-08-27 when user upgrade from v1.3.5 to v1.3.6, and there is a
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-08-27 Mon 02:25
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END: 
  user config file on disk.
  on preferences window init, should show:
  'For help on writing configs, click Help button.'

** DONE wait. when there is no user config file. where is the message that I 
   show to the user?
   ok. It's in update_user_config_textbox().
   _('tell_user_about_config_file_help')
















* DONE 2013-11-13 fix Issue 16 - ff-nextpage - doesn't work on any webpage - nextpage addon for firefox, use SPC key to goto next page when at the bottom of a page - Google Project Hosting
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-13 Wed 22:31
  :ARCHIVE_FILE: ~/projects/firefox/nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
http://code.google.com/p/ff-nextpage/issues/detail?id=16

<a href="/en-US/firefox/extensions/tabs/?sort=users&amp;page=2" class="button next">
        Next ▸</a>

This next page link is not found by nextpage.
- add ▸ in nextPattern.
- check for class "next" when no next page link cound be found using previous
  methods.

  getNextPageLink
  post-generic

* DONE 2014-05-19 nextpage issue 21
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-05-19 Mon 21:12
  :ARCHIVE_FILE: ~/projects/ff_nextpage/doc/operational
  :ARCHIVE_OLPATH: current
  :ARCHIVE_CATEGORY: operational
  :ARCHIVE_TODO: DONE
  :ARCHIVE_ITAGS: entry
  :END:
the page has a <a> link with &gt;&gt;, so I used that.

but the page does not have a <a> with &gt;

- So the design of that page is just wrong.
  how to work around it?

  1. use a preGeneric handler. easy, but not very elegant.

  2. try to have better support for ?page=N
     when a <a> with page=N+1 is found, should use it.

     And this should happen before the common "next" scan.
     Could re-use the a nodes though.
